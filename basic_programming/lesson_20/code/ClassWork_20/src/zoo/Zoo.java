package zoo;

/**
 * @author Andrej Reutow
 * created on 01.10.2023
 */
public class Zoo {
    public static void main(String[] args) {
        // Создаем объекты разных классов

        Animal genericAnimal = new Animal();
        //genericAnimal - переменная имеет тип Animal. У нее доступны только те методы и поля, которые определены в классе Animal.
        //В данном случае, у нее доступен только метод makeSound(), который определен в классе Animal.
        // Этот метод можно вызвать на объекте genericAnimal, и он выведет текст "Это какой-то звук животного.

        Animal lion = new Lion();
        //lion - переменная также имеет тип Animal, но фактический объект, на который она ссылается, является экземпляром класса Lion.
        //Поскольку переменная lion объявлена как Animal, у нее по-прежнему доступен только метод makeSound() класса Animal.
        //Но есть одно исключение: если мы выполним явное приведение типа к Lion, то сможем вызвать методы класса Lion, такие как roar().
        //Однако, для безопасности, перед вызовом метода roar() следует проверить тип объекта с помощью оператора instanceof, чтобы избежать ошибок времени выполнения.

        Animal elephant = new Cat();   // elephant имеет тип Animal, но фактический тип Elephant
        //elephant - аналогично переменная elephant имеет тип Animal, но фактический объект - экземпляр класса Elephant.
        //Также, как и в случае с lion, у переменной elephant доступен только метод makeSound() класса Animal.
        //И также, мы можем выполнить явное приведение типа и вызвать методы класса Elephant, такие как trumpet(), после проверки с помощью instanceof.


        //Важно понимать, что тип переменной определяет набор методов и полей, к которым можно обратиться без явного приведения типа.
        //Однако с помощью приведения типов можно временно изменить тип переменной и вызвать методы, специфичные для фактического типа объекта, на который она ссылается.


        // Приведение типа "genericAnimal" к "Льву" и вызов метода "реветь"
        if (genericAnimal instanceof Lion) {
            // Проверили сначала с помощью instanceof, чтобы убедиться, что это безопасно.
            // Затем вызвали метод roar(), доступный только в классе Lion.
            // Теперь castedLion может вызывать метод roar() класса Lion, а также может вызывать методы класса Animal.
            Lion castedLion = (Lion) genericAnimal;  // Мы выполнили явное приведение типа объекта genericAnimal к типу Lion
            castedLion.roar();          // Вывод: Лев ревет: Ррррр!
            castedLion.makeSound();     // Вывод: Это какой-то звук животного.
        } else {
            System.out.println("genericAnimal не является львом.");
        }

        // Приведение типа "elephant" к "Слону" и вызов метода "трубит"
        if (elephant instanceof Cat) {
            // Также мы выполнили явное приведение типа объекта elephant к типу Elephant
            // и вызвали метод trumpet().
            Cat castedElephant = (Cat) elephant;
            castedElephant.trumpet();       // Вывод: Слон трубит: Фуууу!
            castedElephant.makeSound();     // Вывод: Это какой-то звук животного.
        } else {
            System.out.println("elephant не является слоном.");
        }

        // Пример вызова метода суперкласса
        // Вызываются методы класса Animal, так как типы этих объектов - Animal,
        // независимо от их фактического типа.
        genericAnimal.makeSound();  // Вывод: Это какой-то звук животного.
        lion.makeSound();           // Вывод: Это какой-то звук животного.
        elephant.makeSound();       // Вывод: Это какой-то звук животного.
    }
}


